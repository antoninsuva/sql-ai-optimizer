{% extends 'base.html.twig' %}

{% block title %}MySQL Optimizer - Run #{{ run.id }}{% endblock %}

{% block content %}
    <div class="d-flex justify-content-between align-items-center mb-4">
        <h1 class="h2 mb-0">Run #{{ run.id }}</h1>
        <a href="/" class="btn btn-outline-secondary">
            <i class="bi bi-arrow-left me-1"></i> Back to All Runs
        </a>
    </div>
    
    {{ summary|raw }}

    <form id="analyze-form" method="POST" action="/run/{{ run.id }}/analyze">
    <div class="card mb-4">
        <div class="card-header">
            <h2 class="h5 mb-0">Run Information</h2>
        </div>
        <div class="card-body">
            <div class="row align-items-center">
                <div class="col-md-4">
                    <p class="mb-0"><strong>Created:</strong> {{ run.created_at|date('Y-m-d H:i:s') }} ({{ run.hostname }})</p>
                </div>
                <div class="col-md-4">
                    <p class="mb-0"><strong>Total Queries:</strong> <span class="badge bg-primary">{{ queries|length }}</span></p>
                </div>
                <div class="col-md-4 text-end">
                    <button type="submit" form="analyze-form" class="btn btn-primary">
                        <i class="bi bi-lightning-charge me-1"></i> Analyze Selected Queries
                    </button>
                </div>
            </div>
            <div class="row mt-2">
                <div class="col-12 text-end">
                    <span class="small text-muted">
                        <i class="bi bi-info-circle me-1"></i> Analysis may take several minutes. Multiple queries can be analyzed in parallel.
                    </span>
                </div>
            </div>
            
            {% if specialInstructions is not empty %}
                <div class="alert alert-info mt-4">
                    <i class="bi bi-info-circle me-2"></i> <strong>Special instructions:</strong><br>
                    {{ specialInstructions|raw }}
                </div>
            {% endif %}

            {% if missingSqlCount > 0 %}
                <div class="alert alert-warning mt-4">
                    <i class="bi bi-exclamation-triangle me-2"></i> A total of <strong>{{ missingSqlCount }}</strong> queries didn't get SQL text on the first try and analysis cannot use real query plan data.
                                            
                    <a href="/run/{{ run.id }}/fetch-queries" class="btn btn-sm btn-warning retry-query-fetch">
                        <i class="bi bi-arrow-repeat me-1"></i> Retry fetching SQL text
                    </a>
                </div>
            {% endif %}
        </div>
    </div>

    {% if groups|length > 0 %}
        <h3 class="mb-3">Query Groups</h3>
        
        
            <input type="hidden" name="run_id" value="{{ run.id }}">
            
            {% for group in groups %}
                <div class="query-group shadow-sm mb-4">
                    <div class="query-group-header">
                        <div class="d-flex justify-content-between align-items-center">
                            <h4 class="h5 mb-0">{{ group.name }}</h4>
                            <a href="#" class="btn btn-sm btn-outline-secondary toggle-queries" data-target="queries-{{ loop.index }}">
                                <span class="badge bg-primary rounded-pill">{{ queries|filter(q => q.group_id == group.id)|length }}</span>
                                <i class="bi bi-chevron-down ms-1"></i>
                            </a>
                        </div>
                        <p class="text-muted mb-0 mt-2">{{ group.description }}</p>
                    </div>
                    
                    <div class="p-3 d-none" id="queries-{{ loop.index }}">
                        {% set group_queries = queries|filter(q => q.group_id == group.id) %}
                        {% for query in group_queries %}
                            <div class="query-box mb-3 pb-3 border-bottom">
                                <div class="form-check">
                                    {% if query.fix_output is empty %}
                                        <input class="form-check-input" type="checkbox" name="query_ids[]" value="{{ query.id }}" id="query-{{ query.id }}">
                                    {% endif %}
                                    <label class="form-check-label" for="query-{{ query.id }}">
                                        {{ query.impact_description }}
                                    </label>
                                </div>
                            
                                <div class="d-flex justify-content-between align-items-center">
                                    <div class="mt-2 small text-muted">
                                        <i class="bi bi-database me-1"></i> Schema: <strong>{{ query.schema }}</strong>
                                    </div> 
                                    {% if query.fix_output is not empty %}
                                        <a href="/query/{{ query.id }}" class="btn btn-sm btn-success">
                                            <i class="bi bi-search me-1"></i> View Analysis
                                        </a>
                                    {% endif %}
                                </div>
                                
                                <div class="mt-2">
                                    <a class="btn btn-sm btn-link text-decoration-none" data-bs-toggle="collapse" href="#queryCode-{{ query.id }}">
                                        <i class="bi bi-code-slash me-1"></i> View SQL
                                    </a>
                                </div>
                                
                                <div class="collapse mt-2" id="queryCode-{{ query.id }}">
                                    <pre class="sql p-3 bg-light text-dark rounded">{{ query.normalized_query_formatted|raw }}</pre>
                                </div>
                            </div>
                        {% endfor %}
                    </div>
                </div>
            {% endfor %}
            
            <div class="text-end mt-4 mb-4">
                <button type="submit" class="btn btn-primary">
                    <i class="bi bi-lightning-charge me-1"></i> Analyze Selected Queries
                </button>
                <div class="mt-2">
                    <span class="small text-muted">
                        <i class="bi bi-info-circle me-1"></i> Analysis may take several minutes. Multiple queries can be analyzed in parallel.
                    </span>
                </div>
            </div>
    {% else %}
        <div class="alert alert-info">
            <i class="bi bi-info-circle me-2"></i> No query groups found for this run.
        </div>
    {% endif %}
    </form>
{% endblock %}

{% block javascripts %}
<script>
    document.addEventListener('DOMContentLoaded', function() {
        // Toggle query groups
        const toggleButtons = document.querySelectorAll('.toggle-queries');
        toggleButtons.forEach(button => {
            button.addEventListener('click', function(event) {
                event.preventDefault(); // Prevent link from changing URL
                const targetId = this.getAttribute('data-target');
                const targetElement = document.getElementById(targetId);
                targetElement.classList.toggle('d-none');
                
                const icon = this.querySelector('.bi');
                if (icon.classList.contains('bi-chevron-down')) {
                    icon.classList.replace('bi-chevron-down', 'bi-chevron-up');
                } else {
                    icon.classList.replace('bi-chevron-up', 'bi-chevron-down');
                }
            });
        });

        // Retry query fetch button handler
        const retryButton = document.querySelector('.retry-query-fetch');
        if (retryButton) {
            retryButton.addEventListener('click', function(e) {
                e.preventDefault();
                
                // Create modal if it doesn't exist
                if (!document.getElementById('retryModal')) {
                    const modalHTML = `
                        <div class="modal fade" id="retryModal" tabindex="-1" aria-labelledby="retryModalLabel" aria-hidden="true">
                            <div class="modal-dialog">
                                <div class="modal-content">
                                    <div class="modal-header">
                                        <h5 class="modal-title" id="retryModalLabel">Fetching Query SQL Text</h5>
                                        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                                    </div>
                                    <div class="modal-body">
                                        <p>Waiting for analyzed queries to appear in current process list on server. Keep this running for a few minutes - you can also try to replicate the problematic use-case on the server to catch the query sooner.</p>
                                        <p><small id="retry-status"></small></p>
                                        <p>Collected <strong id="collected-queries-count">{{ queries|length - missingSqlCount }}</strong> of <strong id="total-queries-count">{{ queries|length }}</strong> queries.</p>
                                        <div class="progress">
                                            <div class="progress-bar progress-bar-striped progress-bar-animated" role="progressbar" style="width: 100%"></div>
                                        </div>
                                    </div>
                                    <div class="modal-footer">
                                        <button type="button" class="btn btn-secondary" id="stop-retry">Stop and Reload</button>
                                    </div>
                                </div>
                            </div>
                        </div>
                    `;
                    document.body.insertAdjacentHTML('beforeend', modalHTML);
                    
                    // Handle stop button
                    document.getElementById('stop-retry').addEventListener('click', function() {
                        window.shouldContinueFetching = false;
                        const modal = bootstrap.Modal.getInstance(document.getElementById('retryModal'));
                        modal.hide();
                    });
                }
                
                // Reset fetch flag
                window.shouldContinueFetching = true;
                
                // Show modal
                const modal = new bootstrap.Modal(document.getElementById('retryModal'));
                modal.show();
                
                // Add event listener to reload page when modal is hidden
                document.getElementById('retryModal').addEventListener('hidden.bs.modal', function() {
                    window.location.reload();
                });
                
                // Start fetch loop
                const url = retryButton.getAttribute('href');
                const statusElement = document.getElementById('retry-status');
                let fetchCount = 0;
                
                function performFetch() {
                    if (!window.shouldContinueFetching) return;
                    
                    fetchCount++;
                    statusElement.textContent = `(attempt ${fetchCount})`;
                    statusElement.textContent = `Attempt ${fetchCount}: fetching...`;
                    
                    fetch(url, {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                            'X-Requested-With': 'XMLHttpRequest'
                        }
                    })
                    .then(response => response.json())
                    .then(data => {
                        statusElement.textContent = `Attempt ${fetchCount}: done`;
                        document.getElementById('collected-queries-count').textContent = data.totalQueriesCount - data.missingQueriesCount;
                        document.getElementById('total-queries-count').textContent = data.totalQueriesCount;

                        if (!data.missingQueriesCount) {
                            window.location.reload();
                            return;
                        }

                        // Wait 1s before next fetch
                        setTimeout(() => {
                            if (window.shouldContinueFetching) {
                                performFetch();
                            }
                        }, 1000);
                    })
                    .catch(error => {
                        statusElement.textContent = `Attempt ${fetchCount}: Error - ${error.message}`;
                        
                        // Wait 1s before next fetch
                        setTimeout(() => {
                            if (window.shouldContinueFetching) {
                                performFetch();
                            }
                        }, 1000);
                    });
                }
                
                // Start the first fetch
                performFetch();
            });
        }

        if(window.location.hash === '#first') {
            window.location.hash = '';
            if(retryButton) {
                retryButton.click();
            }
        }

        // Form submission handling
        const analyzeForm = document.getElementById('analyze-form');
        analyzeForm.addEventListener('submit', function(event) {
            event.preventDefault();
            
            // Check if any checkbox is checked
            const checkedBoxes = analyzeForm.querySelectorAll('input[name="query_ids[]"]:checked');
            
            if (checkedBoxes.length === 0) {
                // Display error if no checkbox is checked
                if (!document.getElementById('error-message')) {
                    const errorDiv = document.createElement('div');
                    errorDiv.id = 'error-message';
                    errorDiv.className = 'alert alert-danger mt-3';
                    errorDiv.innerHTML = '<i class="bi bi-exclamation-triangle me-2"></i> Please select at least one query to analyze.';
                    analyzeForm.querySelector('.card').after(errorDiv);
                    
                    // Auto-remove the error after 5 seconds
                    setTimeout(() => {
                        const msg = document.getElementById('error-message');
                        if (msg) msg.remove();
                    }, 5000);
                }
                return;
            }
            
            // Create and show loading overlay
            const loadingOverlay = document.createElement('div');
            loadingOverlay.id = 'loading-overlay';
            loadingOverlay.style.cssText = 'position:fixed;top:0;left:0;width:100%;height:100%;background:rgba(255,255,255,0.8);display:flex;justify-content:center;align-items:center;z-index:9999;';
            loadingOverlay.innerHTML = '<div class="text-center"><div class="spinner-border text-primary mb-3" role="status"></div><p>Analyzing queries... This may take a few minutes.</p></div>';
            document.body.appendChild(loadingOverlay);
            
            // Submit form with fetch API
            fetch(analyzeForm.action, {
                method: 'POST',
                body: new FormData(analyzeForm)
            })
            .then(response => {
                if (!response.ok) {
                    throw new Error('Network response was not ok');
                }
                return response.json();
            })
            .then(data => {
                window.location.href = data.url;
            })
            .catch(error => {
                console.error('Error:', error);
                // Remove loading overlay
                document.getElementById('loading-overlay').remove();
                
                // Show error message
                const errorDiv = document.createElement('div');
                errorDiv.className = 'alert alert-danger mt-3';
                errorDiv.innerHTML = '<i class="bi bi-exclamation-triangle me-2"></i> An error occurred while analyzing queries. Please try again.';
                analyzeForm.querySelector('.card').after(errorDiv);
            });
        });
    });
</script>
{% endblock %} 